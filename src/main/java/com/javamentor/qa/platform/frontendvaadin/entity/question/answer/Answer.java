package com.javamentor.qa.platform.frontendvaadin.entity.question.answer;import com.javamentor.qa.platform.frontendvaadin.entity.question.Question;import com.javamentor.qa.platform.frontendvaadin.entity.user.User;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import javax.validation.constraints.NotNull;import java.io.Serializable;import java.time.LocalDateTime;import java.util.List;import java.util.Objects;@Getter@Setter@NoArgsConstructor@AllArgsConstructor@Builderpublic class Answer implements Serializable {    private static final long serialVersionUID = 8978480742174798932L;    private Long id;    private LocalDateTime persistDateTime;    private LocalDateTime updateDateTime;    private Question question;    private User user;    private String htmlBody;    private Boolean isHelpful;    @NotNull    private Boolean isDeleted;    private LocalDateTime dateAcceptTime;    private List<CommentAnswer> commentAnswers;    private List<AnswerVote> answerVotes;    private void prePersistFunction() {        checkConstraints();    }    private void preUpdateFunction() {        checkConstraints();    }    private void checkConstraints() {//        try {////            if (this.user.getId() <= 0) {////                throw new EntityNotFoundException("User id must be > 0 on create or update.");//            }//        } catch (NullPointerException e) {//            throw new EntityNotFoundException("User id must be not null on create.");//        }    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Answer answer = (Answer) o;        return Objects.equals(id, answer.id) &&                Objects.equals(persistDateTime, answer.persistDateTime) &&                Objects.equals(updateDateTime, answer.updateDateTime) &&                Objects.equals(question, answer.question) &&                Objects.equals(user, answer.user) &&                Objects.equals(htmlBody, answer.htmlBody) &&                Objects.equals(isHelpful, answer.isHelpful) &&                Objects.equals(isDeleted, answer.isDeleted) &&                Objects.equals(dateAcceptTime, answer.dateAcceptTime);    }    @Override    public int hashCode() {        return Objects.hash(id, persistDateTime, updateDateTime, question, user, htmlBody, isHelpful, isDeleted, dateAcceptTime);    }}